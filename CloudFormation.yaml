#Paramteres for the environment 
Parameters:
  Env: 
    Description: Environment variable
    Type: String
    Default: "dev" 
    AllowedValues: ["dev", "test", "prod"]

  VpcCidr: 
    Description: Cidr for vpc
    Type: String
    Default: "10.0.0.0/21"

#Resources for the environment
#1.1 VPC 
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: 
        - Key: Name
          Value: !Sub ${Env}_VPC

#1.2 Create Subnets
  PublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [ 1, !Cidr [!GetAtt Vpc.CidrBlock, 8, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Env}_Pub_A

  PublicB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Select [ 2, !Cidr [!GetAtt Vpc.CidrBlock, 8, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Env}_Pub_B

  PublicC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Select [ 3, !Cidr [!GetAtt Vpc.CidrBlock, 8, 8]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Env}_Pub_C

  PrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [ 4, !Cidr [!GetAtt Vpc.CidrBlock, 8, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Env}_Priv_A

  PrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Select [ 5, !Cidr [!GetAtt Vpc.CidrBlock, 8, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Env}_Priv_B

  PrivateC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Select [ 6, !Cidr [!GetAtt Vpc.CidrBlock, 8, 8]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Env}_Priv_C



#1.3 Create Public RT and forward public trafic to the Internet 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${Env}_RT

#1.4 Associate public subnets to public RT
  AssociationPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicA

  AssociationPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicB

  AssociationPublicC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicC

#1.5 Create RTs, forward trafic and assosiate with subnets in private
#Subnet A
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${Env}_priv_A_RT

  AssociationPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateA

#Subnet B 
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${Env}_priv_B_RT

  AssociationPrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateB

#Subnet C 
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${Env}_priv_C_RT

  AssociationPrivateC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateC

#1.6 Security groups
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: General usage in the private subnet
      GroupName: PrivateSecurityGroup
      SecurityGroupEgress: 
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VpcCidr
      Tags: 
        - Key: Name
          Value: !Sub ${Env}_private_SG
      VpcId: !Ref Vpc

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: General usage in the public subnet
      GroupName: PublicSecurityGroup
      SecurityGroupEgress: 
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VpcCidr
      Tags: 
        - Key: Name
          Value: !Sub ${Env}_public_SG
      VpcId: !Ref Vpc

  SessionManagerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security group for session manager
      GroupName: SessionManagerSecurityGroup
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
      Tags: 
        - Key: Name
          Value: !Sub ${Env}_SessionManager_SG
      VpcId: !Ref Vpc

#2 S3 Bucket 
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${Env}-mvtthxw-bucket
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: arn:${AWS::Partition}:kms:${AWS::Region}:${AWS:AccountId}:alias/aws/s3

#3 EC2
#3.1 Create profile, role with policies - read only s3, SSM
  Ec2InstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: MvtthxwBucketRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: MvtthxwBucketPolicy
          PolicyDocument: 
            Statement: 
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                  - !Sub arn:aws:s3:::${S3Bucket}
                  - !Sub arn:aws:s3:::${S3Bucket}/*
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2Profile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles:
        - !Ref Ec2InstanceRole

#3.2 Create EC2
  EC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-0cff7528ff583bf9a
      KeyName: ss
      InstanceType: t2.micro
      SubnetId: !Ref PublicA
      IamInstanceProfile: !Ref EC2Profile
      SecurityGroupIds:
        - !GetAtt PublicSecurityGroup.GroupId
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 8
            Encrypted: true 
      Tags: 
        - Key: Name
          Value: !Sub ${Env}_EC2

#3.3 VPC endpoint for Session Manager
  SsmVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref Vpc
      SubnetIds:
        - !Ref PublicA
        - !Ref PublicB
        - !Ref PublicC
      SecurityGroupIds:
        - !Ref SessionManagerSecurityGroup
      VpcEndpointType: Interface
      PrivateDnsEnabled: True

  SsmMessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref Vpc
      SubnetIds:
        - !Ref PublicA
        - !Ref PublicB
        - !Ref PublicC
      SecurityGroupIds:
        - !Ref SessionManagerSecurityGroup
      VpcEndpointType: Interface
      PrivateDnsEnabled: True

  Ec2MessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref Vpc
      SubnetIds:
        - !Ref PublicA
        - !Ref PublicB
        - !Ref PublicC
      SecurityGroupIds:
        - !Ref SessionManagerSecurityGroup
      VpcEndpointType: Interface
      PrivateDnsEnabled: True